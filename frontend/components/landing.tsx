/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/SON4mle7cyn
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

'use client';

import Link from "next/link"
import { Button } from "@/components/ui/button"
import React, { useState, useRef } from 'react';
import axios from 'axios';

const Landing: React.FC = () => {
  // Add these state and ref declarations
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);

  // Implement the recording functions
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        setAudioBlob(audioBlob);
        sendAudioToAPI(audioBlob);
      };

      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Error accessing microphone:', error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const sendAudioToAPI = async (audioBlob: Blob) => {
    try {
      const formData = new FormData();
      formData.append('audio', audioBlob, 'recorded_audio.wav');

      const response = await axios.post('https://care-triangle-backend-dot-hack-team-the-brainwaves.nw.r.appspot.com/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      // Assuming the API returns an audio file URL
      const responseAudioUrl = response.data.audioUrl;
      playResponseAudio(responseAudioUrl);
    } catch (error) {
      console.error('Error sending audio to API:', error);
    }
  };

  const pa = (audioUrl: string) => {
    const audio = new Audio(audioUrl);
    audio.play();
  };

  // Add this handler for your existing button
  const handleRecordClick = () => {
    if (isRecording) {
      console.log("stopping!!");
      stopRecording();
    } else {
      console.log("starting!!");
      startRecording();
    }
  };

  return (
    <div className="flex min-h-[100dvh] flex-col items-center justify-center bg-[#ffedf9] text-foreground">
      <header className="absolute top-6 left-1/2 -translate-x-1/2">
        <Link href="#" prefetch={false}>
          <MountainIcon className="h-8 w-8" />
          <span className="sr-only">Acme Inc</span>
        </Link>
      </header>
      <div className="container px-4 py-12 text-center md:px-6 lg:py-24">
        <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl md:text-6xl lg:text-7xl">
          Hello, tell me about your dependent with dementia
        </h1>
        <p className="mx-auto mt-4 max-w-xl text-muted-foreground md:text-xl">
          We're here to help you navigate the challenges of caring for a loved one with dementia. Share your story and
          let us provide personalized support and resources.
        </p>
        <div className="mt-8 flex justify-center items-center gap-2">
          <Button onClick={handleRecordClick} variant="outline" size="lg" className="bg-[#06B0B9] text-primary-foreground">
            {isRecording ? 'Stop Recording' : 'Start Recording'}
            <MicIcon className="h-6 w-6" />
            Start Recording
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Landing;

function MicIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z" />
      <path d="M19 10v2a7 7 0 0 1-14 0v-2" />
      <line x1="12" x2="12" y1="19" y2="22" />
    </svg>
  )
}


function MountainIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>
  )
}


function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
