/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/SON4mle7cyn
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

'use client';

import Link from "next/link"
import { Button } from "@/components/ui/button"
import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Image from 'next/image'

const Landing: React.FC = () => {
  // Add these state and ref declarations
  const [isRecording, setIsRecording] = useState(false);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [apiResponse, setApiResponse] = useState<string>('');

  const questions = [
    'Hello, tell me about yourself',
    'What are the biggest challenges you face?',
    'How do you manage their care?',
    // Add more questions here
  ];

  useEffect(() => {
      const fetchData = async () => {
        try {
          await axios.get('https://care-triangle-backend-dot-hack-team-the-brainwaves.nw.r.appspot.com/refresh');
          console.log('Cache refreshed successfully');
        } catch (error) {
          console.error('Error refreshing cache:', error);
        }
      };

      fetchData();
    }, []);

  useEffect(() => {
    if (currentQuestion >= questions.length) {
      // Reroute to another page when the last question is asked
      window.location.href = '/dashboard';
    }
  }, [currentQuestion, questions.length]);

  const startRecording = async () => {
    setApiResponse(''); // Clear previous response
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };

      // Create a promise that resolves when the API call is complete
      const apiCallComplete = new Promise<void>((resolve) => {
        mediaRecorder.onstop = async () => {
          const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
          setAudioBlob(audioBlob);
          await sendAudioToAPI(audioBlob);
          resolve();
        };
      });

      mediaRecorder.start();
      setIsRecording(true);

      // Stop the recording after 5 seconds (adjust as needed)
      setTimeout(() => {
        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
          mediaRecorderRef.current.stop();
          setIsRecording(false);
        }
      }, 5000);

      // Wait for the API call to complete
      await apiCallComplete;

      // Move to the next question
      setCurrentQuestion(prevQuestion => prevQuestion + 1);

    } catch (error) {
      console.error('Error in recording process:', error);
      setApiResponse('Error occurred during the recording process.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      // Wait a few seconds before updating the question
      setTimeout(() => {
        setCurrentQuestion(currentQuestion + 1);
      }, 2000);
    }
  };

  const sendAudioToAPI = async (audioBlob: Blob) => {
    try {
      const formData = new FormData();
      formData.append('audio', audioBlob, 'recorded_audio.wav');

      const response = await axios.post('https://care-triangle-backend-dot-hack-team-the-brainwaves.nw.r.appspot.com/upload', formData, {
        headers: { 
          'Content-Type': 'multipart/form-data'
        },
      });

      // Log the entire response for debugging
      console.log("Full API response:", response.data);

      // Check if the response has data and an "answer" key
      if (response.data && response.data.answer) {
        console.log("API answer:", response.data.answer);
        setApiResponse(response.data.answer);
      } else {
        console.error("Unexpected API response format");
        setApiResponse('Unexpected response from the server.');
      }

      // Return the response in case you need to use it elsewhere
      return response.data;

    } catch (error) {
      console.error('Error sending audio to API:', error);
      setApiResponse('Error occurred while processing the audio.');
      throw error; // Re-throw the error to be handled by the caller if needed
    }
  };

  const handleRecordClick = () => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  };

  const pa = (audioUrl: string) => {
    const audio = new Audio(audioUrl);
    audio.play();
  };

  return (
    <div className="flex min-h-[100dvh] flex-col items-center justify-center bg-[#ffedf9] text-foreground">
      <header className="absolute top-6 left-1/2 -translate-x-1/2">
        <Link href="#" prefetch={false}>
          <MountainIcon className="h-8 w-8" />
          <span className="sr-only">Acme Inc</span>
        </Link>
      </header>
      <div className="container px-4 py-12 text-center md:px-6 lg:py-24">
        <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl md:text-6xl lg:text-7xl">
          {questions[currentQuestion]}
        </h1>
        <p className="mx-auto mt-4 max-w-xl text-muted-foreground md:text-xl">
          We are here to help you navigate the challenges of caring for a loved one with dementia. Share your story and
          let us provide personalized support and resources.
        </p>
        <div className="mt-8 flex flex-col justify-center items-center gap-4">
          <Button onClick={handleRecordClick} variant="outline" size="lg" className="bg-[#06B0B9] text-primary-foreground">
            {isRecording ? 'Stop Recording' : 'Start Recording'}
            <MicIcon className="h-6 w-6" />
          </Button>
          {apiResponse && (
            <div className="mt-4 p-4 bg-white rounded-lg shadow-md">
              <p className="text-lg">{apiResponse}</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Landing;

function MicIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z" />
      <path d="M19 10v2a7 7 0 0 1-14 0v-2" />
      <line x1="12" x2="12" y1="19" y2="22" />
    </svg>
  )
}


function MountainIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m8 3 4 8 5-5 5 15H2L8 3z" />
    </svg>
  )
}


function XIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
